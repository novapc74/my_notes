
Подумать над ответами на вопросы?

1. Какую проблему решают ваши проекты? Для чего они?
2. Чему вы научились выполняя тот или иной проект?
3. Фреймворки.

1. План о мативации.
    Возникла необходимость создания сайта Интернет магазина. Поспрашивал цены, почитал отзывы. Понял, что в мой бюджет сделают так себе. Было свободное время, решил немного вникнуть в суть вопроса, чтобы и ТЗ правильно сформировать, и в технических вопросах быть подкованным. YUTUBE дал не структурированную информацию. По ходу анализа начал немного вникать в суть проблемы. И подумал, что было бы не плохо и самому овладеть технологиями. На частые запросы начали вывалиывться курсы. На hexlet прошел бесплатный этап, и проглотил наживку. Дальше как в тумане, забыл про свой магазин, отодвинул основную работу, очнулся - уроки все прошел + 4 проекта и полтора месяца до завершения. Ощущение легкого дискомфорта, а что дальше? Стек переполнен, нужна структура, а без реальной разработки время на ветер.

2. Git.
    Система контроля версий — один из главных инструментов профессионального разработчика. Независимо от направления разработки, все программисты работают с исходным кодом проектов, который постоянно добавляется, изменяется и удаляется.
    Код удобно клонировать, анализировать, добавлять свои изменения, передавать обновления, изменять историю.
    Достаточно легко вливаться в открытие проекты, предлагать свои улучшения.

3. Что нового в php 8.

    JIT - Включить JIT можно в настройках opcache в файле php.ini. Для веб приложениий скорость обработки запросов может и не увеличиться, а вот для большого числа математических операций прирост скорости даже очень значительный.
    
    Аннотации/Атрибуты (Attributes). Можно будет использовать подсказки любимой IDE, функция "Find usages", и даже рефакторинг!

    Адекватное приведение строки в число.

    Теперь throw — это выражение.
        $value = $nullableValue ?? throw new InvalidArgumentException();

    Возможность опустить переменную исключения (PermissionException $ex) -> (PermissionException) IDE не будет подсвечивать.
    
    Стабильная сортировка - Это означает, что равные элементы будут оставаться в том же порядке, что и были до сортировки.
    
    Объединения типов (Union Types 2.0) -> private int|float $number;
    
    Тип mixed (Mixed Type v2) функция может возвращать что угодно.
    
    Оператор match -> switch
        $v = 1;
        echo match ($v) {
            0 => 'Foo',
            1 => 'Bar',
            2 => 'Baz',
        };  // Bar

4. Асинхронность в php. 
    Операции, связанные с обращением к базе данных, отправкой почты, записью в файл и т.д. связаны с блокированием выполнения последующего кода. Т.е. интерпритатор ожидает, пока текущщая операция не завершиться (не вернется подтверждение успешного завершения операции), что сильно влияет на скорость выполнения кода. И это есть большая проблема для PHP.
    
    Для PHP есть многопоточное расширение [http://pthreads.org/ pthreads], не входит в ядро php, нужно устанавливать.
    
    Сервера очередей (Gearman) - для больших приложений. Используют для отправки почты.

    Если вебсервер Nginx, то он имеет в своем составе FastCGI (FPM) --> fastcgi_finish_request(); после этого вызова код будет продолжать работать, а как сформируется ответ, посетитель сразу его увидит.

5. Диалекты SQL. 
    
    DDL - Data Definition Language (определения данных)          CREATE, DROP, ALTER, TRUNCATE.
    
    DQl - Data Query Language (запросов данных).                 SELECT.
    
    DML - Data Manipulation Language (манипулирования данными)   INSERT, UPDATE, DELETE, CALL, EXPLAIN CALL, LOCK.
    
    DCL - Data Control Language (управления данными)             GRANT - дает пользователям права доступа к базе данных
                                                                 REVOKE - отменяет права доступа пользователя.
    
    TCL - Transaction Control Language (управление транзакциями) COMMIT, ROLLBACK, SET Transaction, SET Constraint.
                                    
6. NoSQL, системы очередей и redis.  
    
    Redis - в первую очередь ориентирован на быстрое выполнение атомарных операций. Данные хранятся в оперативной памяти, что обеспечивает очень быстрый доступ к ним. Наиболее активное применение он находит в кэшировании и в реализации брокеров сообщений и очередей.

    MongoDB - это NoSQL хранилище данных, крайне удобное для хранения информации, которая не может быть нормально структурирована в рамках реляционных баз данных. Может работать в распределенном режиме. Для записи использует документы JSON.                      

7. CQRS
    Это стиль архитектуры, в котором операции чтения отделены от операций записи. Одна из естественных причин развития CQRS — не симметричное распределение нагрузки и сложности бизнес-логики на read и write — подсистемы. Большинство бизнес-правил и сложных проверок находится во write — подсистеме. При этом читают данные зачастую в разы чаще, чем изменяют.

8. Протоколы. HTTP поверх TCP/IP. Вебсервер сам закрывает сессию и не имеет реализации динамических маршрутов.
    
    HTTP 1.1 - HyperText Transfer Protocol. порт 80. Задача, которая традиционно решается с помощью протокола HTTP — обмен данными между пользовательским приложением, осуществляющим доступ к веб-ресурсам (обычно это веб-браузер) и веб-сервером. API многих программных продуктов также подразумевает использование HTTP для передачи данных — сами данные при этом могут иметь любой формат, например, XML или JSON.

    HTTPS - HyperText Transfer Protocol Secure. порт 443
    
    SPDY (speedy) - модификацией протокола HTTP, цель которой — уменьшить задержки при загрузке веб-страниц, а также обеспечить дополнительную безопасность. Увеличение скорости обеспечивается посредством сжатия, приоритизации и мультиплексирования дополнительных ресурсов, необходимых для веб-страницы, чтобы все данные можно было передать в рамках одного соединения. На данный момент поддержка протокола SPDY есть в браузерах Firefox, Chromium/Chrome, Opera, Internet Exporer и Amazon Silk.                            

9. Тесты. 
    Unit testing - модульное тестирование. Легко протестировать отдельные участки кода, тем самым повысив скорость разработки и рефакторинга. Покрытие кода xdebug.

    Feature testing - тестирование функционала системы. Тут проверятся что определенный запрос дает определенный ответ, приводит к определенным результам. Например, что переход пользователя по определенному адресу должен выдать HTML страницу с некими данными. Проверка работоспособности системы с точки зрения пользователя.

    API testing - тестирование приложения. Восстребованность повышается при использовании микросервисной архитектуры.

    Acceptance testing - Приёмочные испытания позволяют определить работает ли приложение так, как ожидает клиент.

10. SOLID
        Принцип единственной ответственности (Single responsibility)
        «На каждый объект должна быть возложена одна единственная обязанность»
        Для этого проверяем, сколько у нас есть причин для изменения класса — если больше одной, то следует разбить данный класс.

        Принцип открытости/закрытости (Open-closed)
        «Программные сущности должны быть открыты для расширения, но закрыты для модификации»
        Для этого представляем наш класс как «чёрный ящик» и смотрим, можем ли в таком случае изменить его поведение.

        Принцип подстановки Барбары Лисков (Liskov substitution)
        «Объекты в программе могут быть заменены их наследниками без изменения свойств программы»
        Для этого проверяем, не усилили ли мы предусловия и не ослабили ли постусловия. Если это произошло — то принцип не соблюдается

        Принцип разделения интерфейса (Interface segregation)
        «Много специализированных интерфейсов лучше, чем один универсальный»
        Проверяем, насколько много интерфейс содержит методов и насколько разные функции накладываются на эти методы, и если необходимо — разбиваем интерфейсы.

        Принцип инверсии зависимостей (Dependency Invertion)
        «Зависимости должны строится относительно абстракций, а не деталей»
        Проверяем, зависят ли классы от каких-то других классов(непосредственно инстанцируют объекты других классов и т.д) и если эта зависимость имеет место, заменяем на зависимость от абстракции.

11. DRY – Don’t Repeat Youself
        Этот принцип заключается в том, что нужно избегать повторений одного и того же кода. Лучше использовать универсальные свойства и функции.

12. KISS – Keep It Simple, Stupid – не усложняй!
        Смысл этого принципа программирования заключается в том, что стоит делать максимально простую и понятную архитектуру, применять шаблоны проектирования и не изобретать велосипед.

13. YAGNI значит You Ain’t Gonna Need It – вам это не понадобится!
        Его суть в том, чтобы реализовать только поставленные задачи и отказаться от избыточного функционала.

14. Чистые функции -детерминированные функции для одних и тех же входных данных они всегда выдают один и тот же результат.
    print_r - детерминированная, всегда возвращает true. Детерминированность дает нам предсказуемость. Если есть возможность написать функцию так, что она будет детерминированной, то так и нужно делать. Хорошая функция - зависит только от своих собственных аргументов.

    Чистые функции обладают рядом ключевых достоинств:
        Их крайне просто тестировать. Достаточно передать на вход функции нужные параметры и посмотреть ожидаемый выход.
        Их безопасно запускать повторно, что особенно актуально в асинхронном коде или в случае многопоточного кода.
        Их легко комбинировать, получая новое поведение без необходимости переписывать программу

    Инкремент и декремент — единственные базовые арифметические операции в PHP, которые обладают побочными эффектами (изменяют само значение в переменной). $i++ - инкремент. --$i - дикримент.

15. ООП - принципы:

            ИНКАПСУЛЯЦИЯ - объединение полей и методов в классе, с целью закрыть прямой доступ к полям и открыть его для методов, которые этими полями управляют. Согласно инкапсуляции, доступ к полям рекомендуется закрывать используя соответствующие спецификаторы доступа. Чтобы предоставить возможность вносить изменения или получать значения полей,  создаются специальные  методы. Геттеры и Сеттеры.

            НАСЛЕДОВАНИЕ - позволяет создавать классы на основе уже существующих. Тем самым облегчая задачу по созданию новых классов с точки зрения использования уже существующего программного кода. Класс, от которого произошло наследование, называется базовым или родительским. Классы, которые произошли от базового, называются потомками, наследниками или производными классами. В PHP также используются абстрактные классы.

            АБСТРАКЦИЯ - Абстрактный класс — это класс, содержащий хотя бы один абстрактный метод. Он описан в программе, имеет поля, методы и не может использоваться для непосредственного создания объекта. То есть от абстрактного класса можно только наследовать. Объекты создаются только на основе производных классов, наследованных от абстрактного.

            ПОЛИМОРФИЗМ - (греч. «многообразие форм») —  в программировании означает возможность использования одного имени для методов  разных классов находящихся в одной иерархии наследования (т.е. в родственных классах) с целью выполнения схожих действий. Создание в производном классе метода с таким же именем что и имя метода родительского класса, называется переопределением метода.
            Суть переопределения метода — производный класс в переопределяемом методе делает похожее, но отличающееся действие, чем действие метода родительского класса.

16. Абстрактные классы.
    Абстрактные классы имеют смысл только в связке с наследованием. В большинстве случаев не нужно создавать объект от базового класса, поэтому его логично пометить как абстрактный. Абстрактный класс, в отличие от конкретного, не должен реализовывать интерфейсы полностью. Всё, что не реализовывает абстрактный класс, должны реализовать его наследники.

17. Трейты.
    Внутри класса к методам трейта нельзя обратиться через parent, только через $this, при условии, что эти методы не приватные. Трейт не может реализовывать интерфейс. Это могут делать только классы. Трейт зависит от метода класса, но класс не зависит от методов и свойств трейта.

18. Паттерны
        Порождающие - ФАБРИКА. Абстрактная фабрика. Строитель. Прототип. ОДИНОЧКА.
        Структурные - АДАПТЕР. Мост. Компоновщик. Декоратор. ФАСАД. Легковес. Заместитель.
        Поведенческие - Итератор. СТРАТЕГИЯ. Шаблонный метод.
